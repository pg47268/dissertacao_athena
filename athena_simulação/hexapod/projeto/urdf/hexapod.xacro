<?xml version="1.0"?>
<robot name="hexapod" xmlns:xacro="http://ros.org/wiki/xacro">
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/hexapod</robotNamespace>
    </plugin>
  </gazebo>

  <xacro:property name="body_y_length" value="0.200" />
  <xacro:property name="body_z_length" value="0.056" />
  <xacro:property name="body_x_length" value="0.120" />
  <xacro:property name="body_mass" value="0.700" />

  <xacro:property name="hip_z_length" value="0.04" />
  <xacro:property name="hip_y_length" value="0.04" />
  <xacro:property name="hip_x_length" value="0.063875" />
  <xacro:property name="hip_mass" value="0.081" />
  <xacro:property name="tc_joint_low" value="${-(35.0*pi)/180}" />
  <xacro:property name="tc_joint_high" value="${(35.0*pi)/180}" />

  <xacro:property name="femur_z_length" value="0.04" />
  <xacro:property name="femur_y_length" value="0.04" />
  <xacro:property name="femur_x_length" value="0.080" />
  <xacro:property name="femur_mass" value="0.136" />
  <xacro:property name="ctr_joint_low" value="${-(85.0*pi)/180}" />
  <xacro:property name="ctr_joint_high" value="${(85.0*pi)/180}" />
  <xacro:property name="ctr_init_pitch" value="0.0" />

  <xacro:property name="tibia_z_length" value="${0.114308}" />
  <xacro:property name="tibia_y_length" value="0.04" />
  <xacro:property name="tibia_x_length" value="0.04" />
  <xacro:property name="tibia_mass" value="${0.01338}" />
  <xacro:property name="fti_joint_low" value="${-(85.0*pi)/180}" />
  <xacro:property name="fti_joint_high" value="${(85.0*pi)/180}" />

  <xacro:property name="foot_mass" value="${0.00892}" />

  <!-- CHECK VALUES PLACED HERE!! -->
  <xacro:property name="imu_size" value="0.004" />
  <xacro:property name="imu_mass" value="0.024" />
  <xacro:property name="infrared_size" value="0.0225" />
  <xacro:property name="infrared_mass" value="0.09" />

  <xacro:property name="servo_vel" value="${(375*pi)/180}" />
  <xacro:property name="servo_effort_limit" value="1.89" />

  <!-- Inertia -->
  <xacro:macro name="cylinder_inertial" params="mass r l">
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="${mass*(3*r*r+l*l)/12}" ixy="0.0" ixz="0.0"
        iyy="${mass*(3*r*r+l*l)/12}" iyz="0.0"
        izz="${mass*r*r/2.0}" />
    </inertial>
  </xacro:macro>

  <!-- Sonar sensors for obstacle detection -->
  <xacro:macro name="sonar" params="suffix xyz rpy">
    <link name="sonar_${suffix}_link">
      <visual>
        <geometry>
          <cylinder radius="${infrared_size}" length="${infrared_size-0.0025}"/>
        </geometry>
      </visual>
      <xacro:cylinder_inertial mass="${infrared_mass}" r="${infrared_size}" l="${infrared_size-0.0025}"/>
    </link>
    <joint name="torso_sonar_${suffix}_joint" type="fixed">
      <parent link="torso"/>
      <child link="sonar_${suffix}_link"/>
      <origin xyz="${xyz}" rpy="${rpy}"/>
    </joint>

    <gazebo reference="sonar_${suffix}_link">
      <material>Gazebo/Black</material>
      <sensor type="ray" name="sonar_${suffix}">
        <pose>0 0 0 0 0 0</pose>
        <visualize>true</visualize>
        <update_rate>50</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>10</samples>
              <resolution>1</resolution>
              <min_angle>-0.1309</min_angle>
              <max_angle>0.1309</max_angle>
            </horizontal>
            <vertical>
              <samples>10</samples>
              <resolution>1</resolution>
              <min_angle>-0.1309</min_angle>
              <max_angle>0.1309</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.02</min>
            <max>1.0</max>
            <resolution>0.003</resolution>
          </range>
        </ray>
        <plugin filename="libgazebo_ros_range.so" name="gazebo_ros_range">
          <gaussianNoise>0.005</gaussianNoise>
          <alwaysOn>true</alwaysOn>
          <updateRate>50</updateRate>
          <topicName>sensor/sonar_${suffix}</topicName>
          <frameName>sonar_${suffix}_link</frameName>
          <visualize>true</visualize>
          <radiation>infrared</radiation>
          <fov>0.02</fov>
        </plugin>
      </sensor>
    </gazebo>

    <gazebo reference="torso_sonar_${suffix}_joint">
      <disableFixedJointLumping>true</disableFixedJointLumping>
    </gazebo>
  </xacro:macro>

  <!-- Hexapod -->
  <link name="dummy_link">
    <visual>
      <origin xyz="0 0 6.0" rpy="0 0 0" />
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="black"/>
    </visual>
    <gazebo reference="dummy_link">
      <material>Gazebo/Black</material>
    </gazebo>
  </link>

  <link name="torso">
    <visual>
      <geometry>
        <box size="${body_x_length} ${body_y_length} ${body_z_length}"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="${body_x_length} ${body_y_length} ${body_z_length}"/>
      </geometry>
    </collision>
    <inertial>
        <mass value="${body_mass}" />
        <inertia ixx="0.002516" ixy="0.0" ixz="0.0"
                 iyy="0.001023" iyz="0.0"
                 izz="0.003173" />
    </inertial>
  </link>
  <joint name="dummy_base_joint" type="fixed">
    <parent link="dummy_link"/>
    <child link="torso"/>
    <origin xyz="0 0 ${tibia_z_length + tibia_x_length*2.0 + 0.4}" rpy="0 0 0"/>
  </joint>
  <gazebo reference="torso">
    <material>Gazebo/LightGrey</material>
  </gazebo>

  <!-- IMU sensor -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="${imu_size} ${imu_size} ${imu_size}"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="${imu_size} ${imu_size} ${imu_size}"/>
      </geometry>
    </collision>
    <inertial>
        <mass value="${imu_mass}" />
        <inertia ixx="${(1/12) * imu_mass * (imu_size * imu_size + imu_size * imu_size)}" ixy="0.0" ixz="0.0"
                 iyy="${(1/12) * imu_mass * (imu_size * imu_size + imu_size * imu_size)}" iyz="0.0"
                 izz="${(1/12) * imu_mass * (imu_size * imu_size + imu_size * imu_size)}" />
    </inertial>
  </link>
  <joint name="torso_imu_joint" type="fixed">
    <parent link="torso"/>
    <child link="imu_link"/>
    <origin xyz="0 0 ${(body_z_length/2.0)+(imu_size/2.0)}" rpy="0 0 0"/>
  </joint>
  <gazebo reference="imu_link">
    <material>Gazebo/Orange</material>
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <robotNamespace>/hexapod</robotNamespace>
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>100.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

  <gazebo reference="torso_imu_joint">
    <disableFixedJointLumping>true</disableFixedJointLumping>
  </gazebo>

  <!-- Sonar/IR sensor for height estimation -->
  <link name="infrared_link">
    <visual>
      <geometry>
        <cylinder radius="${infrared_size-0.0185}" length="${infrared_size-0.0185}"/>
      </geometry>
    </visual>
    <xacro:cylinder_inertial mass="${infrared_mass}" r="${infrared_size-0.0185}" l="${infrared_size-0.0185}"/>
  </link>
  <joint name="torso_infrared_joint" type="fixed">
    <parent link="torso"/>
    <child link="infrared_link"/>
    <origin xyz="0 ${(body_y_length/2.0)-(infrared_size-0.0185)} ${-(body_z_length/2.0)-(infrared_size-0.0185)}" rpy="${pi/2.0} ${pi/2.0} 0"/>
  </joint>
  <gazebo reference="infrared_link">
    <material>Gazebo/Black</material>
    <sensor type="ray" name="infrared_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>50</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>10</samples>
            <resolution>1</resolution>
            <min_angle>-0.14835</min_angle>
            <max_angle>0.14835</max_angle>
          </horizontal>
          <vertical>
            <samples>10</samples>
            <resolution>1</resolution>
            <min_angle>-0.14835</min_angle>
            <max_angle>0.14835</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.001</min>
          <max>2</max>
          <resolution>0.002</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="gazebo_ros_range">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>50</updateRate>
        <topicName>sensor/ir</topicName>
        <frameName>infrared_link</frameName>
        <visualize>true</visualize>
        <radiation>infrared</radiation>
        <fov>0.02</fov>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="torso_infrared_joint">
    <disableFixedJointLumping>true</disableFixedJointLumping>
  </gazebo>

  <!-- Macro function to placed sonars -->
  <!-- 3 sensores a frente 90 graus-->
  <!--xacro:sonar suffix="1" xyz="0 ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${pi/2.0}"/-->
  <!--xacro:sonar suffix="2" xyz="${(-0.0042 - infrared_size)} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(2*pi)/3.0}"/-->
  <!--xacro:sonar suffix="3" xyz="${(0.0042 + infrared_size)} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(pi)/3.0}"/-->
  
  <!-- 3 sensores a frente 150 graus-->
  <!--xacro:sonar suffix="1" xyz="0 ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${pi/2.0}"/-->
  <!--xacro:sonar suffix="2" xyz="${(-2.0 * infrared_size)} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0) + 0.1}" rpy="0 ${(2.0*pi)/45.0} ${(5.0*pi)/6.0}"/--> <!--nao utilizo esq-->
  <!--xacro:sonar suffix="2" xyz="${-body_x_length + infrared_size} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(5.0*pi)/6.0}"/--> <!--esquerda-->
  <!--xacro:sonar suffix="3" xyz="${(body_x_length - infrared_size)} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(pi)/6.0}"/--> <!--direita-->
  <!-- 1 atrás e 1 em cada lado -->
  <!--xacro:sonar suffix="4" xyz="0 ${-(body_y_length/2.0) + infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${-pi/2.0}"/--> <!-- atras -->
  <!--xacro:sonar suffix="5" xyz="${(body_x_length - hip_x_length - infrared_size/2.0)} ${(-0.04 - infrared_size)} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${-pi/12.0}"/-->  <!-- direita -->
  <!--xacro:sonar suffix="6" xyz="${(-body_x_length + hip_x_length + infrared_size/2.0)} ${(-0.04 - infrared_size)} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(13.0*pi)/12.0}"/--> <!-- esquerda -->
  
  <!-- 1 em cada lado -->
  <!--xacro:sonar suffix="1" xyz="0 ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${pi/2.0}"/--> <!-- frente -->
  <!--xacro:sonar suffix="2" xyz="${(body_x_length/2.0 - hip_x_length + infrared_size)} ${-(body_y_length/2.0) + infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${-pi/2.0}"/--> <!-- atras -->
  <!--xacro:sonar suffix="3" xyz="${(body_x_length - hip_x_length)} ${(body_y_length/2.0)- hip_y_length - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 0"/-->  <!-- direita -->
  <!--xacro:sonar suffix="4" xyz="${(-body_x_length + hip_x_length)} ${(0 - infrared_size)} ${(body_z_length/2.0)+(infrared_size/2.0)+0.09}" rpy="0 ${pi/10.0} ${pi}"/--> <!-- esquerda -->
  
  <!-- 3 a frente; 3 atras; 1 em cada lado -->
  <xacro:sonar suffix="1" xyz="0 ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${pi/2.0}"/> <!-- frente -->
  <xacro:sonar suffix="2" xyz="${-body_x_length + hip_x_length + infrared_size/2.0} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(3.0*pi)/4.0}"/> <!--esq-->
  <xacro:sonar suffix="3" xyz="${(body_x_length - hip_x_length - infrared_size/2.0)} ${(body_y_length/2.0) - infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${(pi)/4.0}"/> <!--dir-->
  <xacro:sonar suffix="4" xyz="0 ${-(body_y_length/2.0) + infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${-pi/2.0}"/> <!-- atras -->
  <xacro:sonar suffix="5" xyz="${(-body_x_length + hip_x_length + infrared_size/2.0)} ${-(body_y_length/2.0) + infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${-3.0*pi/4.0}"/> <!--esq-->
  <xacro:sonar suffix="6" xyz="${(body_x_length - hip_x_length - infrared_size/2.0)} ${-(body_y_length/2.0) + infrared_size} ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${-pi/4.0}"/> <!--dir-->
  <xacro:sonar suffix="7" xyz="${(body_x_length - hip_x_length - infrared_size/2.0)} 0 ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 0"/>  <!--lado dir-->
  <xacro:sonar suffix="8" xyz="${(-body_x_length + hip_x_length + infrared_size/2.0)} 0 ${(body_z_length/2.0)+(infrared_size/2.0)}" rpy="0 0 ${pi}"/> <!--lado esq-->

  <xacro:macro name="coxa" params="suffix reflect_front reflect_right rpy">
    <link name="coxa_${suffix}">
      <visual>
        <origin xyz="${hip_x_length/2} 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${hip_x_length} ${hip_y_length} ${hip_z_length}"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="${hip_x_length/2} 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${hip_x_length} ${hip_y_length} ${hip_z_length}"/>
        </geometry>
      </collision>
      <inertial>
          <origin xyz="${hip_x_length/2} 0 0" rpy="0 0 0" />
          <mass value="${hip_mass}" />
          <inertia ixx="0.0000216" ixy="0.0" ixz="0.0"
                   iyy="0.0000383401" iyz="0.0"
                   izz="0.0000383401" />
      </inertial>
    </link>
    <joint name="tc_${suffix}" type="revolute">
      <axis xyz="0 0 1"/>
      <parent link="torso"/>
      <child link="coxa_${suffix}"/>
      <origin xyz="${reflect_right*body_x_length/2.0} ${reflect_front*body_y_length/2.0} 0" rpy="${rpy}"/>
      <limit lower="${tc_joint_low}" upper="${tc_joint_high}" effort="${servo_effort_limit}" velocity="${servo_vel}"/>
      <dynamics friction="0.0" />
    </joint>
    <gazebo reference="coxa_${suffix}">
      <material>Gazebo/LightGrey</material>
    </gazebo>
    <gazebo reference="tc_${suffix}">
      <provideFeedback>true</provideFeedback>
    </gazebo>
    <gazebo>
      <plugin name="torque_sensor_tc_${suffix}" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>50.0</updateRate>
        <topicName>torque_tc_${suffix}</topicName>
        <jointName>tc_${suffix}</jointName>
      </plugin>
    </gazebo>
    <transmission name="j_tc_${suffix}">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="tc_${suffix}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="motor_tc_${suffix}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:macro name="femur" params="suffix reflect_right">
    <link name="femur_${suffix}">
      <visual>
        <origin xyz="${femur_x_length/2.0} 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${femur_x_length} ${femur_y_length} ${femur_z_length}"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="${femur_x_length/2.0} 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${femur_x_length} ${femur_y_length} ${femur_z_length}"/>
        </geometry>
      </collision>
      <inertial>
          <origin xyz="${femur_x_length/2} 0 0" rpy="0 0 0" />
          <mass value="${femur_mass}" />
          <inertia ixx="0.0000362667" ixy="0.0" ixz="0.0"
                   iyy="0.0000906667" iyz="0.0"
                   izz="0.0000906667" />
      </inertial>
    </link>
    <joint name="ctr_${suffix}" type="revolute">
      <axis xyz="0 -1 0"/>
      <parent link="coxa_${suffix}"/>
      <child link="femur_${suffix}"/>
      <origin xyz="${hip_x_length} 0 0" rpy="0 0 0"/>
      <limit lower="${ctr_joint_low}" upper="${ctr_joint_high}" effort="${servo_effort_limit}" velocity="${servo_vel}"/>
      <dynamics friction="0.0" />
    </joint>
    <gazebo reference="femur_${suffix}">
      <material>Gazebo/LightGrey</material>
    </gazebo>
    <gazebo reference="ctr_${suffix}">
      <provideFeedback>true</provideFeedback>
    </gazebo>
    <gazebo>
      <plugin name="torque_sensor_ctr_${suffix}" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>50.0</updateRate>
        <topicName>torque_ctr_${suffix}</topicName>
        <jointName>ctr_${suffix}</jointName>
      </plugin>
    </gazebo>
    <transmission name="j_ctr_${suffix}">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="ctr_${suffix}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="motor_ctr_${suffix}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:macro name="tibia" params="suffix reflect_right">
    <link name="tibia_${suffix}">
      <visual>
          <origin xyz="0 0 ${-tibia_z_length/2.0}" rpy="0 0 0" />
          <geometry>
            <box size="${tibia_x_length} ${tibia_y_length} ${tibia_z_length}"/>
          </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 ${-tibia_z_length/2.0}" rpy="0 0 0" />
        <geometry>
          <box size="${tibia_x_length} ${tibia_y_length} ${tibia_z_length}"/>
        </geometry>
      </collision>
      <inertial>
          <origin xyz="0 0 ${-tibia_z_length/2.0}" rpy="0 0 0" />
          <mass value="${tibia_mass}" />
          <inertia ixx="0.0000163529" ixy="0.0" ixz="0.0"
                   iyy="0.0000163529" iyz="0.0"
                   izz="0.000003568" />
      </inertial>
    </link>
    <joint name="fti_${suffix}" type="revolute">
      <axis xyz="0 -1 0" />
      <parent link="femur_${suffix}"/>
      <child link="tibia_${suffix}"/>
      <origin xyz="${femur_x_length} 0 0" rpy="0 0 0"/>
      <limit lower="${fti_joint_low}" upper="${fti_joint_high}" effort="${servo_effort_limit}" velocity="${servo_vel}"/>
      <dynamics friction="0.0" />
    </joint>
    <gazebo reference="tibia_${suffix}">
      <material>Gazebo/LightGrey</material>
    </gazebo>
    <gazebo reference="fti_${suffix}">
      <provideFeedback>true</provideFeedback>
    </gazebo>
    <gazebo>
      <plugin name="torque_sensor_fti_${suffix}" filename="libgazebo_ros_ft_sensor.so">
        <updateRate>50.0</updateRate>
        <topicName>torque_fti_${suffix}</topicName>
        <jointName>fti_${suffix}</jointName>
      </plugin>
    </gazebo>
    <transmission name="j_fti_${suffix}">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="fti_${suffix}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="motor_fti_${suffix}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:macro name="foot" params="suffix reflect_right">
    <link name="foot_${suffix}">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <sphere radius="${0.04/2.0}"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <sphere radius="${0.04/2.0}"/>
        </geometry>
      </collision>
      <inertial>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <mass value="${foot_mass}" />
          <inertia ixx="0.0000057088" ixy="0.0" ixz="0.0"
                   iyy="0.0000057088" iyz="0.0"
                   izz="0.0000057088" />
      </inertial>
    </link>
    <joint name="foot_${suffix}_joint" type="fixed">
      <parent link="tibia_${suffix}"/>
      <child link="foot_${suffix}"/>
      <origin xyz="0 0 ${-tibia_z_length-tibia_x_length/2.0}" rpy="0 0 0"/>
    </joint>
    <gazebo reference="foot_${suffix}_joint">
      <disableFixedJointLumping>true</disableFixedJointLumping>
    </gazebo>
    <gazebo reference="foot_${suffix}">
      <kp>1e06</kp>
      <kd>1.0</kd>
      <maxVel>0.0</maxVel>
      <minDepth>0.003</minDepth>
      <material>Gazebo/LightGrey</material>
      <collision name="foot_${suffix}_collision">
        <geometry>
          <sphere>
            <radius>${tibia_x_length/2.0}</radius>
          </sphere>
        </geometry>
        <surface>
          <friction>
            <ode>
              <solver>
                <friction_model>cone_model</friction_model>
                <mu>1.0</mu>
              </solver>
            </ode>
          </friction>
        </surface>
      </collision>
      <!-- Bumper sensor for contact detection -->
      <sensor name="contact_sensor_${suffix}" type="contact">
        <always_on>true</always_on>
        <contact>
          <collision>foot_${suffix}_collision</collision>
        </contact>
        <plugin name="foot_${suffix}_plugin" filename="libgazebo_ros_bumper.so">
          <updateRate>50</updateRate>
          <always_on>true</always_on>
          <bumperTopicName>foot_${suffix}_bumper</bumperTopicName>
          <frameName>world</frameName>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- gazebo ros joint state pub plugin -->
  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <robotNamespace>/hexapod</robotNamespace>
      <jointName>tc_1, tc_2, tc_3, tc_4, tc_5, tc_6, ctr_1, ctr_2, ctr_3, ctr_4, ctr_5, ctr_6, fti_1, fti_2, fti_3, fti_4, fti_5, fti_6</jointName>
      <updateRate>50</updateRate>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo>

  <xacro:macro name="leg" params="suffix reflect_front reflect_right rpy">
    <xacro:coxa suffix="${suffix}" reflect_front="${reflect_front}" reflect_right="${reflect_right}" rpy="${rpy}"/>
    <xacro:femur suffix="${suffix}" reflect_right="${reflect_right}"/>
    <xacro:tibia suffix="${suffix}" reflect_right="${reflect_right}"/>
    <xacro:foot suffix="${suffix}" reflect_right="${reflect_right}"/>
  </xacro:macro>

  <xacro:leg suffix="1" reflect_front="0" reflect_right="1" rpy="0 0 ${0.0*pi/2.0 - 0.0*1.0*pi/4.0}"/>
  <xacro:leg suffix="2" reflect_front="1" reflect_right="1" rpy="0 0 ${1.0*pi/2.0 - 1.0*1.0*pi/4.0}"/>
  <xacro:leg suffix="3" reflect_front="1" reflect_right="-1" rpy="0 0 ${1.0*pi/2.0 - 1.0*-1.0*pi/4.0}"/>
  <xacro:leg suffix="4" reflect_front="0" reflect_right="-1" rpy="0 0 ${pi}"/>
  <xacro:leg suffix="5" reflect_front="-1" reflect_right="-1" rpy="0 0 ${-1.0*pi/2.0 - -1.0*-1.0*pi/4.0}"/>
  <xacro:leg suffix="6" reflect_front="-1" reflect_right="1" rpy="0 0 ${-1.0*pi/2.0 - -1.0*1.0*pi/4.0}"/>
</robot>
